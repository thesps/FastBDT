package decisionTree;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

public class BDTManager extends CustomManager{

	public static DFEType TX = DFETypeFactory.dfeFix(8, 24, SignMode.TWOSCOMPLEMENT);
	public static DFEType Tscore = DFETypeFactory.dfeFix(16, 16, SignMode.TWOSCOMPLEMENT);

	public static void main(String[] args){
		EngineParameters params = new EngineParameters(args);

		// Read the BDT from the JSON file
		TreeReader reader = new TreeReader("../CPUCode/bdtjson.txt");
		BDTParams p = reader.bdtParams();
		BDTParams bdtParams = new BDTParams(p.nTrees, p.nFeatures, p.learningRate, p.initPredict, TX, Tscore);
		BDTManager manager = new BDTManager(params, bdtParams, reader.baseTrees());
		manager.createSLiCinterface(interfaceDefault(bdtParams));
		BuildConfig bc = new BuildConfig(manager.getBuildConfig().getBuildLevel());
		//bc.setMPPRParallelism(4);
		bc.setMPPRCostTableSearchRange(1, 4);
		manager.setBuildConfig(bc);
		manager.build();
	}

	public BDTManager(EngineParameters engineParams, BDTParams bdtParams, BaseTree[] baseTrees) {
		super(engineParams);
		config.setDefaultStreamClockFrequency(500);
		getCurrentKernelConfig().debug.setEnableLatencyAnnotation(true);
		KernelBlock bdtKernel = addKernel(new BDTKernel(makeKernelParameters("BDTKernel"), bdtParams, baseTrees));
		DFELink X = addStreamFromCPU("X");
		bdtKernel.getInput("X") <== X;

		DFELink score = addStreamToCPU("score");
		score <== bdtKernel.getOutput("score");
	}

	private static EngineInterface interfaceDefault(BDTParams bdtParams) {
		EngineInterface engine_interface = new EngineInterface();
		CPUTypes   tX = CPUTypes.INT32;
		CPUTypes   tScore = CPUTypes.INT32;
		int        sizeX = tX.sizeInBytes();
		int		   sizeScore = tScore.sizeInBytes();

		InterfaceParam N = engine_interface.addParam("N", CPUTypes.INT32);
		engine_interface.setTicks("BDTKernel", N);
		engine_interface.setStream("X",   tX, bdtParams.nFeatures * N * sizeX);
		engine_interface.setStream("score",   tScore, N * sizeScore);
		return engine_interface;
	}
}
