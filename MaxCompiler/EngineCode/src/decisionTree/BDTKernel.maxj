package decisionTree;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

public class BDTKernel extends Kernel{

	public BDTKernel(KernelParameters params, BDTParams bdtParams, BaseTree[] baseTrees){
		super(params);
		// Construct the ensemble of trees
		int nTrees = baseTrees.length;
		DFEDecisionTree[] ensemble = new DFEDecisionTree[nTrees];
		for(int i = 0; i < nTrees; i++){
			ensemble[i] = new DFEDecisionTree(this, baseTrees[i], bdtParams.Tscore);
			ensemble[i].learningRate(bdtParams.learningRate); // Set the learning rate to push calc. to constants
		}
		DFEBDT bdt = new DFEBDT(this, ensemble, bdtParams);

		// Input the features
		DFEVectorType<DFEVar> Xvt = new DFEVectorType<DFEVar>(bdtParams.TX[0], bdtParams.nFeatures); // note assumes all features have same type
		DFEVector<DFEVar> Xv = io.input("X", Xvt);

		/*DFEVar[] X = new DFEVar[bdtParams.nFeatures];
		for(int i = 0; i < bdtParams.nFeatures; i++){
			X[i] = Xv.get(i);
		}*/

		DFEVar score = bdt.decisionFunction(Xv);

		io.output("score", score, bdtParams.Tscore);
	}

}
